Binary file build/bin/geth matches
cmd/geth/snapshot.go:	snaptree, err := snapshot.New(chaindb, trie.NewDatabase(chaindb), 256, TriesInMemory, headBlock.Root(), false, false, false, false)
cmd/geth/snapshot.go:	snaptree, err := snapshot.New(chaindb, trie.NewDatabase(chaindb), 256, 128, headBlock.Root(), false, false, false, false)
cmd/geth/snapshot.go:	triedb := trie.NewDatabase(chaindb)
cmd/geth/snapshot.go:	triedb := trie.NewDatabase(chaindb)
cmd/geth/snapshot.go:	snaptree, err := snapshot.New(db, trie.NewDatabase(db), int(triesInMemory), 256, root, false, false, false, false)
cmd/geth/dbcmd.go:	theTrie, err := trie.New(stRoot, trie.NewDatabase(db))
core/state/snapshot/generate.go:		snapTrieDb := trie.NewDatabase(snapNodeCache)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:	triedb := trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/snapshot/generate_test.go:		triedb = trie.NewDatabase(diskdb)
core/state/pruner/pruner.go:	snaptree, err := snapshot.New(db, trie.NewDatabase(db), 256, int(triesInMemory), headBlock.Root(), false, false, false, false)
core/state/pruner/pruner.go:	snaptree, err := snapshot.New(db, trie.NewDatabase(db), 256, int(triesInMemory), headBlock.Root(), false, false, true, false)
core/state/pruner/pruner.go:	t, err := trie.NewSecure(genesis.Root(), trie.NewDatabase(db))
core/state/pruner/pruner.go:				storageTrie, err := trie.NewSecure(acc.Root, trie.NewDatabase(db))
core/state/sync_test.go:	trie, err := trie.New(root, trie.NewDatabase(db))
core/state/database.go:		db:            trie.NewDatabaseWithConfig(db, config),
core/state/database.go:		db:               trie.NewDatabaseWithConfig(db, config),
eth/protocols/snap/sync_test.go:	db := trie.NewDatabase(rawdb.NewMemoryDatabase())
eth/protocols/snap/sync_test.go:		db      = trie.NewDatabase(rawdb.NewMemoryDatabase())
eth/protocols/snap/sync_test.go:		db             = trie.NewDatabase(rawdb.NewMemoryDatabase())
eth/protocols/snap/sync_test.go:		db             = trie.NewDatabase(rawdb.NewMemoryDatabase())
eth/protocols/snap/sync_test.go:	triedb := trie.NewDatabase(db)
les/server_handler.go:	trie, _ := trie.New(root, trie.NewDatabase(rawdb.NewTable(h.chainDb, prefix)))
les/downloader/downloader_test.go:		_, err := trie.NewSecure(block.Root(), trie.NewDatabase(dl.stateDb))
les/handler_test.go:		trie, _ := trie.New(header.Root, trie.NewDatabase(server.db))
les/handler_test.go:			t, _ := trie.New(header.Root, trie.NewDatabase(server.db))
les/handler_test.go:	trie, _ := trie.New(root, trie.NewDatabase(rawdb.NewTable(server.db, light.ChtTablePrefix)))
les/handler_test.go:		trie, _ := trie.New(root, trie.NewDatabase(rawdb.NewTable(server.db, light.BloomTrieTablePrefix)))
light/postprocess.go:		triedb:         trie.NewDatabaseWithConfig(trieTable, &trie.Config{Cache: 1}), // Use a tiny cache only to keep memory down
light/postprocess.go:		triedb:         trie.NewDatabaseWithConfig(trieTable, &trie.Config{Cache: 1}), // Use a tiny cache only to keep memory down
light/odr_test.go:		t, _ := trie.New(req.Id.Root, trie.NewDatabase(odr.sdb))
light/trie.go:			t.trie, err = trie.New(t.id.Root, trie.NewDatabase(t.db.backend.Database()))
light/trie.go:			t, err := trie.New(t.id.Root, trie.NewDatabase(t.db.backend.Database()))
tests/fuzzers/stacktrie/trie_fuzzer.go:		dbA         = trie.NewDatabase(spongeA)
tests/fuzzers/trie/trie-fuzzer.go:	triedb := trie.NewDatabase(memorydb.New())
tests/fuzzers/les/les-fuzzer.go:	chtTrie, _ = trie.New(common.Hash{}, trie.NewDatabase(rawdb.NewMemoryDatabase()))
tests/fuzzers/les/les-fuzzer.go:	bloomTrie, _ = trie.New(common.Hash{}, trie.NewDatabase(rawdb.NewMemoryDatabase()))
